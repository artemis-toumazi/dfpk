doses <- c(12.59972,34.65492,44.69007,60.80685,83.68946,100.37111)
theta <- 0.2
options <- list(nchains = 4,niter = 4000,nadapt = 0.9)
AUCs <- c(1.2303254, 3.3839503,4.3638522, 5.9376084,8.1720269, 9.8009405,
1.5330900, 4.2166896, 5.4377306,7.3987646, 10.1830398, 12.2128046, 2.1126844,
5.8108359 , 7.4934992)
x <- c(1,1,1,2,2,2,2,2,3,3,3,3,2,3,3)
y <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0, 1, 0, 0, 0)
res2 <- nextDose(model, y, AUCs, doses, x, theta, options)
model <- pkcrm
p0 <- c(.01,.05,.1,.2,.35,0.45)
L <- log(15.09)
doses <- c(12.59972,34.65492,44.69007,60.80685,83.68946,100.37111)
theta <- 0.2
options <- list(nchains = 4,niter = 4000,nadapt = 0.9)
AUCs <- c(1.2303254, 3.3839503,4.3638522, 5.9376084,8.1720269, 9.8009405,
1.5330900, 4.2166896, 5.4377306,7.3987646, 10.1830398, 12.2128046, 2.1126844,
5.8108359 , 7.4934992)
x <- c(1,1,1,2,2,2,2,2,3,3,3,3,2,3,3)
y <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0, 1, 0, 0, 0)
res2 <- nextDose(model, y, AUCs, doses, x, theta, options, p0 = p0, L = L)
res2
res2
plotTrial(res2)
plotTrial(res1)
gen.scen
TR = 5                                 # Total number of simulations
N = 30
cohort = 1
simulatedData <- gen.scen
doses <- simulatedData@doses
icon <- c(2:6, round(seq(9, 48, ((48-9)/4))))
theta <- 0.2
##############################################
############### Select a model ###############
##############################################
model = pktox
################################################
#### Set the Stan model's options as a list ####
################################################
options <- list(nchains = 4,
niter = 4000,
nadapt = 0.9)
############################################
############ Run the simulation(s) #########
############################################
results_sim <- nsim(doses, N, cohort, icon, theta, model, simulatedData, TR)
results_sim
results_sim@newDose
plotDo(results_sim, ci = T, boxplot=F)
TR = 5                                 # Total number of simulations
N = 30
cohort = 1
simulatedData <- gen.scen
doses <- simulatedData@doses
icon <- c(2:6, round(seq(9, 48, ((48-9)/4))))
theta <- 0.2
##############################################
############### Select a model ###############
##############################################
model = pktox
################################################
#### Set the Stan model's options as a list ####
################################################
options <- list(nchains = 4,
niter = 4000,
nadapt = 0.9)
############################################
############ Run the simulation(s) #########
############################################
results_sim <- nsim(doses, N, cohort, icon, theta, model, simulatedData, TR)
TR = 10                                 # Total number of simulations
N = 30
cohort = 1
simulatedData <- gen.scen
doses <- simulatedData@doses
icon <- c(2:6, round(seq(9, 48, ((48-9)/4))))
theta <- 0.2
##############################################
############### Select a model ###############
##############################################
model = pktox
################################################
#### Set the Stan model's options as a list ####
################################################
options <- list(nchains = 4,
niter = 4000,
nadapt = 0.9)
############################################
############ Run the simulation(s) #########
############################################
results_sim <- nsim(doses, N, cohort, icon, theta, model, simulatedData, TR)
results_sim
results_sim@newDose
plotDo(results_sim, ci = T,boxplot = )
plotDo(results_sim, ci = T,boxplot = F)
plotDose
plotDose(results_sim, TR=1)
plotDose(results_sim, TR=5)
plotDose(results_sim, TR=6)
plotDose(results_sim, TR=7)
plotDo(results_sim, ci = F,boxplot = T)
library(dfpk)
?nsim
nsim
library(dfpk)
?nsim
TR = 1                                 # Total number of simulations
N = 15
limitTox <- 10.96
PKparameters <- c(2, 10, 100)             # PK parameters ka,CL,V
omegaIIV <- 0.7
omegaAlpha <- 0
doses <- c(12.59972,34.65492,44.69007,60.80685,83.68946,100.37111)
timeSampling <- seq(0, 24, length.out=48)
sigma <- c(rep(0.2, length(timeSampling)), rep(0.2,length(timeSampling)))
gen.scen <- sim.measurements(PKparameters,omegaIIV,omegaAlpha,sigma,doses,limitTox,timeSampling, N)
cohort = 1
simulatedData <- gen.scen
doses <- simulatedData@doses
icon <- c(2:6, round(seq(9, 48, ((48-9)/4))))
theta <- 0.2
##############################################
############### Select a model ###############
##############################################
model = pktox
################################################
#### Set the Stan model's options as a list ####
################################################
options <- list(nchains = 4,
niter = 4000,
nadapt = 0.9)
############################################
############ Run the simulation(s) #########
############################################
results_sim15 <- nsim(doses, N, cohort, icon, theta, model, simulatedData, TR)
results_sim15
plot(results_sim15)
plot(results_sim15, ask = T)
results_sim15@toxicity
yyy <- c(0 ,0 , 0 , 0 , 0  , 1 ,   0   , 0 ,   0 ,    0 ,    1   ,  0  ,   0 ,    0  ,   0)
yyy
results_sim15@doseLevels
dd <- c(1  ,  2 ,   3 ,   4,    5 ,   6,    4 ,   4,    4,     5,     5,     4,     4,     5    , 5)
dd
results_sim15@AUCs
as.vector(results_sim15@AUCs)
results_sim15
install.packages("/Volumes/USB DISK/dfpk_2.2.0.tar.gz", repos = NULL, type = "source")
library(devtools)
load_all("/Volumes/USB DISK/dfpk_CRAN_March2017")
install.packages(PK)
install.packages("PK")
library(PK)
load_all("/Volumes/USB DISK/dfpk_CRAN_March2017")
check("/Volumes/USB DISK/dfpk_CRAN_March2017")
build("/Volumes/USB DISK/dfpk_CRAN_March2017")
install.packages("/Volumes/USB DISK/dfpk_2.2.0.tar.gz", repos = NULL, type = "source")
library(dfpk)
?nextDose
doses <- c(12.59972,34.65492,44.69007,60.80685,83.68946,100.37111)
theta <- 0.2
options <- list(nchains = 4,
niter = 4000,
nadapt = 0.9)
AUCs <- c(1.208339,  5.506040,  6.879835,  3.307928,  3.642430,
10.271291,  3.885522,  3.086622,  2.537158,  5.525917,
8.522176,  4.642741, 11.048531, 10.246976,  5.226807)
x <- c(1, 2, 3, 4, 5, 6, 4, 4, 4, 5, 5, 4, 4, 5, 5)
y <- c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
nextD <- nextDose(model = "pktox", y=y, AUCs=AUCs, doses=doses,
x=x, theta=theta, options=options)
library("dfpk", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
nextD <- nextDose(model = "pktox", y=y, AUCs=AUCs, doses=doses,
x=x, theta=theta, options=options)
?pktox
doses <- c(12.59972,34.65492,44.69007,60.80685,83.68946,100.37111)
theta <- 0.2
options <- list(nchains = 2,
niter = 4000,
nadapt = 0.8)
AUCs <-  c(0.43, 1.4, 5.98, 7.98, 11.90, 3.45)
x <- c(1,2,3,4,5,6)
y <- c(FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)
pktox(y, AUCs, doses, x, theta, options = options)
nextD <- nextDose(model = "pktox", y=y, AUCs=AUCs, doses=doses,
x=x, theta=theta, options=options, betapriors = c(10000, 20, 10))
library(dfpk)
nextD <- nextDose(model = "pktox", y=y, AUCs=AUCs, doses=doses,
x=x, theta=theta, options=options, betapriors = c(10000, 20, 10))
install.packages("/Volumes/USB DISK/dfpk_2.2.0.tar.gz", repos = NULL, type = "source")
detach("package:dfpk", unload=TRUE)
library(dfpk)
install.packages("/Volumes/USB DISK/dfpk_2.2.0.tar.gz", repos = NULL, type = "source")
library(dfpk)
doses <- c(12.59972,34.65492,44.69007,60.80685,83.68946,100.37111)
AUCs <- c(1.208339,  5.506040,  6.879835,  3.307928,  3.642430,
10.271291,  3.885522,  3.086622,  2.537158,  5.525917,
8.522176,  4.642741, 11.048531, 10.246976,  5.226807)
x <- c(1, 2, 3, 4, 5, 6, 4, 4, 4, 5, 5, 4, 4, 5, 5)
y <- c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
theta
options
nextD <- nextDose(model = "pktox", y=y, AUCs=AUCs, doses=doses,
x=x, theta=theta, options=options, betapriors = c(10000, 20, 10))
nextD
plot(nextD)
p0 <- c(.01,.05,.1,.2,.35,0.45)
L <- log(15.09)
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options)
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, betapriors = 10000 )
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, betapriors = 10000 )
y
doses
pkcrm
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, betapriors = 10000)
?pkcrm
library(dfpk)
?pkcrm
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, betapriors = 10000)
install.packages("/Volumes/USB DISK/dfpk_2.2.0.tar.gz", repos = NULL, type = "source")
library(dfpk)
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, betapriors = 10000)
library(devtools)
load_all("/Volumes/USB DISK/dfpk_CRAN_March2017")
check("/Volumes/USB DISK/dfpk_CRAN_March2017")
build("/Volumes/USB DISK/dfpk_CRAN_March2017")
install.packages("/Volumes/USB DISK/dfpk_2.2.0.tar.gz", repos = NULL, type = "source")
library(dfpk)
p0 <- c(.01,.05,.1,.2,.35,0.45)
L <- log(15.09)
doses <- c(12.59972,34.65492,44.69007,60.80685,83.68946,100.37111)
theta <- 0.2
options <- list(nchains = 4,
niter = 4000,
nadapt = 0.9)
AUCs <- c(1.208339,  5.506040,  6.879835,  3.307928,  3.642430,
10.271291,  3.885522,  3.086622,  2.537158,  5.525917,
8.522176,  4.642741, 11.048531, 10.246976,  5.226807)
x <- c(1, 2, 3, 4, 5, 6, 4, 4, 4, 5, 5, 4, 4, 5, 5)
y <- c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options)
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, betapriors = 10000)
?pkcrm
p0 <- c(.01,.05,.1,.2,.35,0.45)      # Skeleton of CRM
L <- log(15.09)                        # Threshold set
doses <- c(12.59972,34.65492,44.69007,60.80685,83.68946,100.37111)
theta <- 0.2
options <- list(nchains = 2,
niter = 4000,
nadapt = 0.8)
AUCs <-  c(0.43, 1.4, 5.98, 7.98, 11.90, 3.45)
x <- c(1,2,3,4,5,6)
y <- c(FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)
pkcrm(y, AUCs, doses, x, theta, p0, L, options = options)
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, p0=p0, L=L)
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, p0=p0, L=L, betapriors = 10000)
?nextDose
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, p0 = p0, L = L)
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, betapriors = 10000, p0 = p0, L = L)
install.packages("/Volumes/USB DISK/dfpk_2.2.0.tar.gz", repos = NULL, type = "source")
library(dfpk)
doses <- c(12.59972,34.65492,44.69007,60.80685,83.68946,100.37111)
theta <- 0.2
options <- list(nchains = 4,
niter = 4000,
nadapt = 0.9)
AUCs <- c(1.208339,  5.506040,  6.879835,  3.307928,  3.642430,
10.271291,  3.885522,  3.086622,  2.537158,  5.525917,
8.522176,  4.642741, 11.048531, 10.246976,  5.226807)
x <- c(1, 2, 3, 4, 5, 6, 4, 4, 4, 5, 5, 4, 4, 5, 5)
y <- c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
p0 <- c(.01,.05,.1,.2,.35,0.45)
L <- log(15.09)
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, betapriors = 10000, p0 = p0, L = L)
nextDose(model = "pkcrm", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, betapriors = 10000, p0 = p0, L = L)
nextDose(model = "pktox", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, betapriors = c(10000, 20, 10))
ne<- nextDose(model = "pktox", y=y, AUCs=AUCs, doses=doses, x=x, theta=theta,
options=options, betapriors = c(10000, 20, 10))
ne
plot(ne)
?sim.data
?nsim
install.packages("metafor")
library(metafor)
?metafor
dat <- get(data(dat.bcg))
### calculate log relative risks and corresponding sampling variances
dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat)
dat
dat <- get(data(dat.bcg))
dat
install.packages("bayesmeta")
library(bayesmeta)
?bayesmeta
data("SnedecorCochran")
## Not run:
# analysis using improper uniform prior
# (may take a few seconds to compute!):
ma01 <- bayesmeta(y=SnedecorCochran[,"mean"], sigma=sqrt(SnedecorCochran[,"var"]),
label=SnedecorCochran[,"no"])
ma01
print(ma01)
summary(ma01)
forestplot(ma01)
plot(ma01)
library(dfpk)
?nsim
nsim
results_sim
pktox
pkcov
pkpop
plot.dosefinding
plot()
plot
pktox
?pktox
?pkcov
?nsim
?sim.data
dtox
pklogit
pkpop
nsim
pkcrm
pktox
pklogit
dtox
dtox
sim.data
pkcrm
pktox
dtox
require("metafor")
require("bayesmeta")
data("CrinsEtAl2014")
CrinsEtAl2014
es <- escalc(measure = "OR",
ai = exp.AR.events, nli = exp.total,
ci = cont.AR.events, n2i = cont.total,
slab = publication, data = CrinsEtAl2014[c(1,5), ])
es <- escalc(measure = "OR",
ai = exp.AR.events, n1i = exp.total,
ci = cont.AR.events, n2i = cont.total,
slab = publication, data = CrinsEtAl2014[c(1,5), ])
es
ma01 <- rma(es)
ma01
rma(es, method = "PM", test="adhoc")
forest(ma01)
es
ba01 <- bayesmeta(es, mu.prior.mean = 0.0, mu.prior.sd = 4.0,
tau.prior = function(x){dhalfnormal(x, scale=0.5)})
ba01
forestplot(ba01)
ba01$qposterior(mu=0.99)
ba01$qposterior(tau=0.99)
plot(mu, ba01$dposterior(mu=mu), type="l")
mu <- seq(from=-3, to=1, length=100)
plot(mu, ba01$dposterior(mu=mu), type="l")
mu <- seq(from=-4, to=1, length=150)
plot(mu, ba01$dposterior(mu=mu), type="l",
col = "blue", xlab = "effect (log-OR)", ylab = "probability density")
lines(mu, ba01$dprior(mu=mu), lty="dashed", col = "blue")
abline(h=0, v = 0)
?TurnerEtAlPrior
names(bma01)
str(bma01)
bma01 <- bayesmeta(es, mu.prior.mean = 0.0, mu.prior.sd = 4.0,
tau.prior = function(x){dhalfnormal(x, scale=0.5)})
bma01
names(bma01)
str(bma01)
forestplot(bma01)
bma01$qposterior(mu=0.99)
bma01$qposterior(tau=0.99)
mu <- seq(from=-4, to=1, length=150)
plot(mu, bma01$dposterior(mu=mu), type="l",
col = "blue", xlab = "effect (log-OR)", ylab = "probability density")
lines(mu, bma01$dprior(mu=mu), lty="dashed", col = "blue")
abline(h=0, v = 0)
bma01$qposterior(mu=0.9)
getwd("Desktop/dfpk")
setwd("Desktop/dfpk")
getwd()
library(devtools)
load_all("Desktop/dfpk")
load_all("/Users/Artemis/Desktop/dfpk")
check("/Users/Artemis/Desktop/dfpk")
build("/Users/Artemis/Desktop/dfpk")
install.packages("~/Desktop/dfpk_3.0.1.tar.gz", repos = NULL, type = "source")
library(dfpk)
set.seed(73)
TR = 10                                 # Total number of simulations
N = 30
limitTox <- 10.96
PKparameters <- c(2, 10, 100)             # PK parameters ka,CL,V
omegaIIV <- 0.7
omegaAlpha <- 0
doses <- c(12.59972, 34.65492, 44.69007, 60.80685, 83.68946, 100.37111)
timeSampling <- seq(0, 24, length.out=48)
sigma <- rep(0.2, length(timeSampling))
gen.scen <- sim.data(PKparameters,omegaIIV,omegaAlpha,sigma,doses,
limitTox,timeSampling, N)
gen.scen
plot(gen.scen )
set.seed(100)
cohort = 1
simulatedData <- gen.scen
doses <- simulatedData@doses
icon <- c(2:6, round(seq(9, 48, ((48-9)/4))))
theta <- 0.2
TR = 10
##############################################
############### Select a model ###############
##############################################
model = "pktox"
############################################
############ Run the simulation(s) #########
############################################
results_simNew <- nsim(doses, N, cohort, icon, theta, model, simulatedData, TR, AUCmethod = 1)
set.seed(110)
cohort = 1
simulatedData <- gen.scen
doses <- simulatedData@doses
icon <- c(2:6, round(seq(9, 48, ((48-9)/4))))
theta <- 0.2
TR = 2
##############################################
############### Select a model ###############
##############################################
model = "dtox"
############################################
############ Run the simulation(s) #########
############################################
results_sim2 <- nsim(doses, N, cohort, icon, theta, model, simulatedData, TR, AUCmethod = 1)
results_sim2
plot(results_sim2, TR = 2)
plot(results_sim2, TR = 2)
plot(results_sim2, TR = 2)
cohort = 1
simulatedData <- gen.scen
doses <- simulatedData@doses
icon <- c(2:6, round(seq(9, 48, ((48-9)/4))))
theta <- 0.2
TR = 1
##############################################
############### Select a model ###############
##############################################
model = "dtox"
############################################
############ Run the simulation(s) #########
############################################
results_sim3 <- nsim(doses, N, cohort, icon, theta, model, simulatedData, TR, AUCmethod = 1)
results_sim3
plot(results_sim3)
plot(results_sim3)
plot(results_sim3)
results_sim2@doseLevels
cohort = 1
simulatedData <- gen.scen
doses <- simulatedData@doses
icon <- c(2:6, round(seq(9, 48, ((48-9)/4))))
theta <- 0.2
TR = 1
##############################################
############### Select a model ###############
##############################################
model = "dtox"
############################################
############ Run the simulation(s) #########
############################################
results_sim4 <- nsim(doses, N, cohort, icon, theta, model, simulatedData, TR, AUCmethod = 1, prob = 0.1)
results_sim4
plot(results_sim4)
plot(results_sim4)
plot(results_sim4)
?dfpk
cohort = 1
simulatedData <- gen.scen
doses <- simulatedData@doses
icon <- c(2:6, round(seq(9, 48, ((48-9)/4))))
theta <- 0.2
TR = 2
##############################################
############### Select a model ###############
##############################################
model = "dtox"
############################################
############ Run the simulation(s) #########
############################################
results_sim5 <- nsim(doses, N, cohort, icon, theta, model, simulatedData, TR, AUCmethod = 1, prob = 0.1)
results_sim5
plot(results_sim5, TR = 2)
plot(results_sim5, TR = 1)
results_sim5@doseLevels
